<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Real-Time Chat</title>
<style>
body {
margin: 0;
font-family: Arial, sans-serif;
}

#chat-container {
width: 100%;
max-width: 600px;

padding: 10px;
box-sizing: border-box;
position: relative;
margin: 0 auto;
}

#top-bar {
display: flex;
align-items: center;
padding: 10px;
background-color: #333;
color: #fff;
position: fixed;
top: 0;
left: 50%;
transform: translateX(-50%);
width: 100%;
max-width: 600px;
z-index: 1000;
}

#receiver-logo {
width: 40px;
height: 40px;
border-radius: 50%;
margin-right: 10px;
}

#receiver-name {
font-size: 1.2em;
}

#messages {
display: flex;
flex-direction: column;
margin-top: 60px;
overflow-y: auto;
max-height: calc(100vh - 120px);
}

.message-left,
.message-right {
max-width: 80%;
padding: 10px;
margin: 5px 0;
border-radius: 10px;
color: #fff;
position: relative;
word-wrap: break-word;
}

.message-left {
background-color: #333;
align-self: flex-start;
display: flex;
align-items: center;
}

.message-right {
background-color: #444;
align-self: flex-end;
}

.message-left .account-img {
width: 30px;
height: 30px;
border-radius: 50%;
margin-right: 10px;
}

.message-left strong {
margin-right: 10px;
}

.message-left p {
flex: 1;
}

.message-left .h6,
.message-right .p-time {
font-size: 0.8em;
color: #ccc;
margin-top: 5px;
}

.seen-status {
font-size: 0.8em;
color: #ccc;
position: absolute;
bottom: -15px;
right: 10px;
}

#chat-form {
display: flex;
margin-top: 10px;
}

#message-input {
flex: 1;
padding: 10px;
border-radius: 5px;
border: 1px solid #ccc;
font-size: 1em;
}

button[type="submit"] {
padding: 10px 20px;
border: none;
background-color: #007bff;
color: #fff;
border-radius: 5px;
cursor: pointer;
}

@media (max-width: 800px) {

.message-left,
.message-right {
max-width: 90%;
}

#chat-container {
width: 100%;
}

#receiver-name {
font-size: 1em;
}

#message-input {
font-size: 0.9em;
}

button[type="submit"] {
font-size: 0.9em;
}
}
</style>
<body>
<div id="chat-container">
<div id="top-bar">
<img id="receiver-logo" src="data:image/jpeg;base64,<%= accounts.logo_image %>" alt="Receiver Logo">
<span id="receiver-name"><%= accounts.name %></span>
</div>
<div id="messages">
<% messages.forEach(message => { %>
<% if (message.receiver_id !== accounts.id) { %>
<div class="message-left" data-message-id="<%= message.message_id %>">
<img alt="" class="account-img" src="data:image/jpeg;base64,<%= accounts.logo_image %>">
<strong><%= accounts.name %>:</strong>
<p><%= message.message_text %></p>
<br>
</div>
<h6 class="h6"><%= message.timestamp.toString().split('G')[0] %></h6>
<% if (message.read_status) { %>
<span class="seen-status">Seen</span>
<% } %>
<% } else { %>
<div class="message-right" data-message-id="<%= message.message_id %>">
<p>
<div class="p-contaner"><%= message.message_text %></div>
</p>
</div>
<h6 class="p-time"><%= message.timestamp.toString().split('G')[0] %></h6>
<% if (message.read_status) { %>
<span class="seen-status p-time">Seen</span>
<% } %>
<% } %>
<% }) %>
<div id="send"></div>
</div>
<form action="/chat" id="chat-form" method="POST">
<input name="sender_id" type="hidden" value="<%= sender_id %>">
<input name="receiver_id" type="hidden" value="<%= receiver_id %>">
<input name="message_text" id="message-input" placeholder="Type a message..." required>
<button type="submit">Send</button>
</form>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
socket.on('receiveMessage', (message) => {
const messageElement = document.createElement('div');
if (message.receiver_id !== <%=sender_id%>) {
messageElement.classList.add('message-left');
messageElement.dataset.messageId = message.message_id;
messageElement.innerHTML = `
<img class="account-img" src="data:image/jpeg;base64,${message.logo_image}" alt="">
<strong>${message.sender_id}:</strong>
<p>${message.message_text}</p>
<br>
<h6 class="h6">${new Date(message.timestamp).toLocaleString('en-US', { day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false })}</h6>
<span class="seen-status">${message.read_status ? 'Seen' : ''}</span>
`;
} else {
messageElement.classList.add('message-right');
messageElement.dataset.messageId = message.message_id;
messageElement.innerHTML = `
<p>
<div class="p-contaner">
  ${message.message_text}
</div>
</p>
<h6 class="p-time">${new Date(message.timestamp).toLocaleString('en-US', { day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false })}</h6>
<span class="seen-status p-time">${message.read_status ? 'Seen' : ''}</span>
`;
}
document.getElementById('messages').appendChild(messageElement);
setTimeout(() => { location.reload() }, 10);
});

document.getElementById('chat-form').addEventListener('submit', (event) => {
event.preventDefault();
const sender_id = document.querySelector('input[name="sender_id"]').value;
const receiver_id = document.querySelector('input[name="receiver_id"]').value;
const message_text = document.getElementById('message-input').value;
socket.emit('sendMessage', { sender_id, receiver_id, message_text });
const messageElement = document.createElement('div');
messageElement.classList.add('message-right');
messageElement.dataset.messageId = Date.now();
messageElement.innerHTML = `
<p>
<div class="p-contaner">
${message_text}
</div>
</p>
<h6 class="p-time">${new Date().toLocaleString('en-US', { day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false })}</h6>
<span class="seen-status p-time"></span>
`;
document.getElementById('messages').appendChild(messageElement);
document.getElementById('message-input').value = '';
setTimeout(() => { location.reload() }, 10);
});

document.getElementById('messages').addEventListener('scroll', () => {
const messages = document.querySelectorAll('.message-left, .message-right');
messages.forEach(message => {
if (message.getBoundingClientRect().top < window.innerHeight && !message.classList.contains('seen')) {
const messageId = message.dataset.messageId;
socket.emit('messageSeen', messageId);
message.classList.add('seen');
}
});
});

socket.on('enterChat', (receiver_id) => {
const messages = document.querySelectorAll('.message-left');
messages.forEach(message => {
const messageId = message.dataset.messageId;
if (message.dataset.receiverId === receiver_id.toString() && !message.querySelector('.seen-status').textContent) {
const seenStatus = message.querySelector('.seen-status');
seenStatus.textContent = 'Seen';
socket.emit('messageUpdated', { message_id: messageId });
}
});
});

document.addEventListener('DOMContentLoaded', () => {
const sectionId = 'send';
if (sectionId) {
const section = document.getElementById(sectionId);
if (section) {
section.scrollIntoView();
}
}
});
</script>
</body>
</html>